name: "Test"
on:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'

  pull_request:
    types: [ opened, synchronize ]
    branches:
      - master
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'

  workflow_dispatch:

jobs:
  unit:
    name: "Run unit tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.23.0

        # todo skip mocks coverage
      - name: Install dependencies and run tests
        run: |
          go mod download
          go test -v ./... -coverpkg=./... -short -coverprofile=unit_coverage.out

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: unit_coverage.out

  integration:
    name: "Run integration tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: 1.23.0

      - name: Install dependencies and run tests
        run: |
          go mod download
          go test -v -run 'Integration$' ./... -coverpkg=./... -coverprofile=integration_coverage.out

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: integration_coverage.out

  code_coverage:
    name: "Code coverage report"
    if: github.event_name == 'pull_request' # Do not run when workflow is triggered by push to main branch
    runs-on: ubuntu-latest
    needs: [ unit, integration ]
    continue-on-error: true # not critical
    permissions:
      contents: read
      actions: read
      pull-requests: write # write permission needed to comment on PR
    steps:
      - uses: fgrosse/go-coverage-report@v1.2.0
        with:
          coverage-artifact-name: code-coverage
          coverage-file-name: unit_coverage.out