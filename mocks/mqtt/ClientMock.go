// Code generated by mockery v2.51.0. DO NOT EDIT.

package mqtt

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	mqtt "github.com/xBlaz3kx/DevX/mqtt"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields: ctx
func (_m *MockClient) Connect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockClient_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Connect(ctx interface{}) *MockClient_Connect_Call {
	return &MockClient_Connect_Call{Call: _e.mock.On("Connect", ctx)}
}

func (_c *MockClient_Connect_Call) Run(run func(ctx context.Context)) *MockClient_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_Connect_Call) Return(_a0 error) *MockClient_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Connect_Call) RunAndReturn(run func(context.Context) error) *MockClient_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with given fields: ctx
func (_m *MockClient) Disconnect(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockClient_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClient_Expecter) Disconnect(ctx interface{}) *MockClient_Disconnect_Call {
	return &MockClient_Disconnect_Call{Call: _e.mock.On("Disconnect", ctx)}
}

func (_c *MockClient_Disconnect_Call) Run(run func(ctx context.Context)) *MockClient_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClient_Disconnect_Call) Return(_a0 error) *MockClient_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Disconnect_Call) RunAndReturn(run func(context.Context) error) *MockClient_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with no fields
func (_m *MockClient) GetId() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type MockClient_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetId() *MockClient_GetId_Call {
	return &MockClient_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *MockClient_GetId_Call) Run(run func()) *MockClient_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetId_Call) Return(_a0 string) *MockClient_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetId_Call) RunAndReturn(run func() string) *MockClient_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockClient) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockClient_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockClient_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockClient_Expecter) Name() *MockClient_Name_Call {
	return &MockClient_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockClient_Name_Call) Run(run func()) *MockClient_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Name_Call) Return(_a0 string) *MockClient_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Name_Call) RunAndReturn(run func() string) *MockClient_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Pass provides a mock function with no fields
func (_m *MockClient) Pass() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Pass")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockClient_Pass_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pass'
type MockClient_Pass_Call struct {
	*mock.Call
}

// Pass is a helper method to define mock.On call
func (_e *MockClient_Expecter) Pass() *MockClient_Pass_Call {
	return &MockClient_Pass_Call{Call: _e.mock.On("Pass")}
}

func (_c *MockClient_Pass_Call) Run(run func()) *MockClient_Pass_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Pass_Call) Return(_a0 bool) *MockClient_Pass_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Pass_Call) RunAndReturn(run func() bool) *MockClient_Pass_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, topic, message
func (_m *MockClient) Publish(ctx context.Context, topic mqtt.Topic, message interface{}) error {
	ret := _m.Called(ctx, topic, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mqtt.Topic, interface{}) error); ok {
		r0 = rf(ctx, topic, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - topic mqtt.Topic
//   - message interface{}
func (_e *MockClient_Expecter) Publish(ctx interface{}, topic interface{}, message interface{}) *MockClient_Publish_Call {
	return &MockClient_Publish_Call{Call: _e.mock.On("Publish", ctx, topic, message)}
}

func (_c *MockClient_Publish_Call) Run(run func(ctx context.Context, topic mqtt.Topic, message interface{})) *MockClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mqtt.Topic), args[2].(interface{}))
	})
	return _c
}

func (_c *MockClient_Publish_Call) Return(_a0 error) *MockClient_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Publish_Call) RunAndReturn(run func(context.Context, mqtt.Topic, interface{}) error) *MockClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: ctx, topic, handler
func (_m *MockClient) Subscribe(ctx context.Context, topic mqtt.Topic, handler mqtt.Handler) error {
	ret := _m.Called(ctx, topic, handler)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, mqtt.Topic, mqtt.Handler) error); ok {
		r0 = rf(ctx, topic, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockClient_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - topic mqtt.Topic
//   - handler mqtt.Handler
func (_e *MockClient_Expecter) Subscribe(ctx interface{}, topic interface{}, handler interface{}) *MockClient_Subscribe_Call {
	return &MockClient_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, topic, handler)}
}

func (_c *MockClient_Subscribe_Call) Run(run func(ctx context.Context, topic mqtt.Topic, handler mqtt.Handler)) *MockClient_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mqtt.Topic), args[2].(mqtt.Handler))
	})
	return _c
}

func (_c *MockClient_Subscribe_Call) Return(_a0 error) *MockClient_Subscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Subscribe_Call) RunAndReturn(run func(context.Context, mqtt.Topic, mqtt.Handler) error) *MockClient_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// SubscribeWithId provides a mock function with given fields: ctx, topic, handler
func (_m *MockClient) SubscribeWithId(ctx context.Context, topic mqtt.Topic, handler mqtt.Handler) {
	_m.Called(ctx, topic, handler)
}

// MockClient_SubscribeWithId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SubscribeWithId'
type MockClient_SubscribeWithId_Call struct {
	*mock.Call
}

// SubscribeWithId is a helper method to define mock.On call
//   - ctx context.Context
//   - topic mqtt.Topic
//   - handler mqtt.Handler
func (_e *MockClient_Expecter) SubscribeWithId(ctx interface{}, topic interface{}, handler interface{}) *MockClient_SubscribeWithId_Call {
	return &MockClient_SubscribeWithId_Call{Call: _e.mock.On("SubscribeWithId", ctx, topic, handler)}
}

func (_c *MockClient_SubscribeWithId_Call) Run(run func(ctx context.Context, topic mqtt.Topic, handler mqtt.Handler)) *MockClient_SubscribeWithId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(mqtt.Topic), args[2].(mqtt.Handler))
	})
	return _c
}

func (_c *MockClient_SubscribeWithId_Call) Return() *MockClient_SubscribeWithId_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_SubscribeWithId_Call) RunAndReturn(run func(context.Context, mqtt.Topic, mqtt.Handler)) *MockClient_SubscribeWithId_Call {
	_c.Run(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
