// Code generated by mockery v2.51.0. DO NOT EDIT.

package mqtt

import (
	mock "github.com/stretchr/testify/mock"
	mqtt "github.com/xBlaz3kx/DevX/mqtt"
)

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: client, topicIds, payloadId, payload, err
func (_m *MockHandler) Execute(client mqtt.Client, topicIds []string, payloadId uint16, payload interface{}, err error) {
	_m.Called(client, topicIds, payloadId, payload, err)
}

// MockHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - client mqtt.Client
//   - topicIds []string
//   - payloadId uint16
//   - payload interface{}
//   - err error
func (_e *MockHandler_Expecter) Execute(client interface{}, topicIds interface{}, payloadId interface{}, payload interface{}, err interface{}) *MockHandler_Execute_Call {
	return &MockHandler_Execute_Call{Call: _e.mock.On("Execute", client, topicIds, payloadId, payload, err)}
}

func (_c *MockHandler_Execute_Call) Run(run func(client mqtt.Client, topicIds []string, payloadId uint16, payload interface{}, err error)) *MockHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(mqtt.Client), args[1].([]string), args[2].(uint16), args[3].(interface{}), args[4].(error))
	})
	return _c
}

func (_c *MockHandler_Execute_Call) Return() *MockHandler_Execute_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Execute_Call) RunAndReturn(run func(mqtt.Client, []string, uint16, interface{}, error)) *MockHandler_Execute_Call {
	_c.Run(run)
	return _c
}

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
