// Code generated by mockery v2.51.0. DO NOT EDIT.

package rabbit

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	rabbitmq "github.com/wagslane/go-rabbitmq"
)

// MockHandlerFunc is an autogenerated mock type for the HandlerFunc type
type MockHandlerFunc struct {
	mock.Mock
}

type MockHandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandlerFunc) EXPECT() *MockHandlerFunc_Expecter {
	return &MockHandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, d
func (_m *MockHandlerFunc) Execute(ctx context.Context, d rabbitmq.Delivery) rabbitmq.Action {
	ret := _m.Called(ctx, d)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 rabbitmq.Action
	if rf, ok := ret.Get(0).(func(context.Context, rabbitmq.Delivery) rabbitmq.Action); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Get(0).(rabbitmq.Action)
	}

	return r0
}

// MockHandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockHandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - d rabbitmq.Delivery
func (_e *MockHandlerFunc_Expecter) Execute(ctx interface{}, d interface{}) *MockHandlerFunc_Execute_Call {
	return &MockHandlerFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, d)}
}

func (_c *MockHandlerFunc_Execute_Call) Run(run func(ctx context.Context, d rabbitmq.Delivery)) *MockHandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(rabbitmq.Delivery))
	})
	return _c
}

func (_c *MockHandlerFunc_Execute_Call) Return(action rabbitmq.Action) *MockHandlerFunc_Execute_Call {
	_c.Call.Return(action)
	return _c
}

func (_c *MockHandlerFunc_Execute_Call) RunAndReturn(run func(context.Context, rabbitmq.Delivery) rabbitmq.Action) *MockHandlerFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHandlerFunc creates a new instance of MockHandlerFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandlerFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandlerFunc {
	mock := &MockHandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
